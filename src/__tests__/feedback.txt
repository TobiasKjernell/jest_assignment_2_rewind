   From LandingScreen.test.tsx gets passed when it should be failed. missing content.
 
  it('removes landing screen after clicking start', () => {
    // We simulate what would happen if the parent removed LandingScreen
    const { rerender } = render(<LandingScreen onStart={() => rerender(<p>Quiz started</p>)} />);
    fireEvent.click(screen.getByRole('button', { name: /start-quiz/i }));

    // Landing screen heading disappears, replaced by quiz content
    expect(screen.queryByRole('heading', { name: /welcome to quickquiz/i })).not.toBeInTheDocument();
    expect(screen.getByText('Quiz started')).toBeInTheDocument();
  });


-------------


  From ResultScreen.test.tsx same as above.

    it('returns to landing screen when play again clicked', () => {
    const { rerender } = render(
      <ResultScreen score={7} total={10} onPlayAgain={() => rerender(<h2>Welcome to QuickQuiz</h2>)} />
    );

    fireEvent.click(screen.getByRole('button', { name: /play-again/i }));

    expect(screen.getByRole('heading', { name: /welcome to quickquiz/i })).toBeInTheDocument();
  });
  

-------------


they way unit test elements were selected/query should be the same in intergration tests from parents test suits.
got abit confusing when selecting new tags/custom aria labels when it's not in the unit test.
Some very important as header/h1 introduction text were not tested, i randomly noticed them in screenshot and added them to test.

